SELECT * 
FROM EMPLOYEES 
order by SALARY ASC, HIRE_DATE DESC ; --ASC 오름차순 DESC 내림차순

SELECT DISTINCT JOB_ID -- DISTINCT 중복된값 삭제 
FROM EMPLOYEES e ;

SELECT EMAIL || '@test.com' -- || 데이터값을 연결해서 보여준다
FROM EMPLOYEES e  ;

SELECT FIRST_NAME , SALARY , SALARY / 10 보너스 
FROM EMPLOYEES e ;

SELECT FIRST_NAME , SALARY 
FROM   EMPLOYEES e 
WHERE  SALARY BETWEEN 6000 AND 10000; -- 연봉이 6000이상 10000이하인 사람

SELECT FIRST_NAME , HIRE_DATE 
FROM EMPLOYEES e 
WHERE HIRE_DATE < '2003-12-31' ; -- 2003년보다 앞에 입사한 사람

SELECT FIRST_NAME 
FROM EMPLOYEES e 
WHERE FIRST_NAME  < 'G' ; -- G보다 앞에있는 알파벳의 이름인 사람

SELECT *
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID IN (100, 101) ; -- ()안에 있는 데이터를 가져온다. 

SELECT FIRST_NAME , COMMISSION_PCT 
FROM EMPLOYEES e 
WHERE COMMISSION_PCT IS NOT NULL ; -- ISNULL은 NULL인 사람만 IS NOT NULL은 NULL이 아닌사람만

SELECT FIRST_NAME 
FROM EMPLOYEES e 
WHERE FIRST_NAME LIKE  '%e' ; --%앞에 적으면 앞에 해당되는 사람 뒤에 적으면 뒤에 해당하는사람 %*% 사이에 해당되는 사람

SELECT FIRST_NAME , JOB_ID 
FROM EMPLOYEES e 
WHERE JOB_ID  LIKE  'ad___'; -- AD뒤에 밑줄만큼 뽑아온다.

SELECT FIRST_NAME , JOB_ID 
FROM EMPLOYEES e 
WHERE JOB_ID  LIKE  'ad___' AND FIRST_NAME LIKE 'ne%' ;

SELECT LOWER (FIRST_NAME) --UPPER(은 대문자) LOWER(은 소문자)로 변경
FROM EMPLOYEES e ;

SELECT JOB_ID , SUBSTRING(JOB_ID,1,2) -- SUBSTRING(첫번째 두번째 문자만 보여준다) 
FROM EMPLOYEES e ;

SELECT JOB_ID , REPLACE (JOB_ID, 'C', 'A') -- ''의 문자를 바꿔준다.
FROM EMPLOYEES e ;

SELECT FIRST_NAME , SUBSTRING(PHONE_NUMBER,1,8)  || '****' -- 별찍기
FROM EMPLOYEES e ;

SELECT 1, 'asfd';

SELECT SALARY , SALARY /30 , round(SALARY /30, 0) -- round는 반올림
FROM EMPLOYEES e ;

SELECT SALARY , SALARY /30 , FLOOR(SALARY /30) -- floor은 내림
FROM EMPLOYEES e ;

SELECT SALARY, CAST (SALARY AS INT) FROM EMPLOYEES e ; -- 형 변환 가능

SELECT ifnull(MANAGER_ID,0)
FROM DEPARTMENTS d ;

SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME , SALARY,
	CASE 
		WHEN SALARY  >= 9000 THEN '상위'
		WHEN SALARY  BETWEEN 6000 AND 8999 THEN '중위'
		ELSE '하위'
	END AS 급여등급
FROM EMPLOYEES e ;


SELECT SUM (SALARY), AVG(SALARY), MAX(SALARY) ,MIN(SALARY) 
FROM EMPLOYEES e ;

SELECT JOB_ID , SUM(SALARY) AS 총급여
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID >= 10
GROUP BY JOB_ID 
ORDER BY  총급여 DESC ;

SELECT JOB_ID , SUM(SALARY) AS 총급여
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID >= 10
GROUP BY JOB_ID 
HAVING SUM(SALARY) > 40000 
ORDER BY  총급여 DESC ;

SELECT e.FIRST_NAME , e.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM EMPLOYEES e , DEPARTMENTS d 
WHERE e.DEPARTMENT_ID =d.DEPARTMENT_ID ;

SELECT e.FIRST_NAME , e.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM EMPLOYEES e 
LEFT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ;

SELECT e.EMPLOYEE_ID, e.FIRST_NAME , e2.EMPLOYEE_ID 매니저ID, e2.FIRST_NAME 
FROM EMPLOYEES e 
JOIN EMPLOYEES e2 ON e.MANAGER_ID = e2.EMPLOYEE_ID ;

SELECT DEPARTMENT_ID 
FROM EMPLOYEES e 
UNION -- 중복된 데이터삭제 UNION ALL 전부 불러옴
SELECT DEPARTMENT_ID 
FROM EMPLOYEES e ;

SELECT *
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID = 100;

SELECT EMPLOYEE_ID 
FROM EMPLOYEES e ;

SELECT EMPLOYEE_ID 
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID = 100 ;

SELECT *
FROM EMPLOYEES e
WHERE e.SALARY IN (
					SELECT SALARY 
					FROM EMPLOYEES e2 
					WHERE LAST_NAME ='De Haan'
				);
			
SELECT *
FROM EMPLOYEES e
WHERE e.SALARY IN (17000) ;

SELECT *
FROM EMPLOYEES e
WHERE e.SALARY IN (
					SELECT SALARY 
					FROM EMPLOYEES e2 
					WHERE LAST_NAME ='King'
				);
			
SELECT JOB_ID , MIN(SALARY) 
FROM EMPLOYEES e 
GROUP BY JOB_ID ;

SELECT *
FROM EMPLOYEES e 
WHERE (e.JOB_ID, e.SALARY) IN (
								SELECT JOB_ID , MIN(SALARY) 
								FROM EMPLOYEES e 
								GROUP BY JOB_ID 
								)
ORDER BY e.SALARY DESC;

SELECT DEPARTMENT_ID 
FROM DEPARTMENTS d 
WHERE DEPARTMENT_NAME = 'IT' ;

SELECT *
FROM EMPLOYEES e 
JOIN (
	SELECT DEPARTMENT_ID 
	FROM DEPARTMENTS d 
	WHERE DEPARTMENT_NAME = 'IT' 
	) AS d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ;

SELECT *
FROM (
	SELECT first_name, salary, RANK () OVER (ORDER BY SALARY) 순위 
	FROM EMPLOYEES e 
	WHERE SALARY > 6000
	) 
WHERE 순위 < 6;

SELECT *
FROM REGIONS r ;

INSERT INTO REGIONS VALUES(5, '금성');

INSERT INTO REGIONS (REGION_ID) VALUES(6);

INSERT INTO REGIONS (REGION_NAME) VALUES('수성');

UPDATE REGIONS SET REGION_NAME = '화성' WHERE REGION_ID = 6;

DELETE FROM REGIONS WHERE REGION_ID IN (5,6);

SELECT *
FROM EMPLOYEES e 
WHERE MANAGER_ID IN (100, 101);

SELECT *
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID IN (100, 101);









